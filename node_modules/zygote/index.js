
// Zygote
// June 22, 2013
// Brian Hendrickson <bh@bh.ly>


var http = require( 'http' );
var pg = require('pg');
var mustache = require( 'mustache' );
var fs = require('fs');
var jsdom = require('jsdom');
var url = require('url');

var ctype = { 'Content-Type' : 'text/html' };

var server = http.createServer( function( req, res ) {
  var f = routes[ req.url + req.method.toLowerCase() ];
  var value = false;
  if (f == undefined) {
    var myarray  = req.url.split(/[\/]/);
    if (!(undefined == myarray[1]))
      if (isInt(myarray[1])) {
        f = routes[ '/:id' + 'get' ];
        value = myarray[1];
      }
  }
  res.writeHead( 200, ctype );
  if ( isFunc( f ))
    f( req, res, value );
  trigger( req.method.toLowerCase(), req, res );
});

var socket = null;
var prefs = {};

var io = require( 'socket.io' ).listen( server );

io.sockets.on( 'connection', function ( sock ) {
  socket = sock;
  socket.on('clientevent', function (data) {
    //
  });
});

var port = 4444;

var routes = {};

var models = {};

var events = {};

function trigger( evt, req, res ) {
  
  f = events[ evt ];

  if ( isFunc( f ) && socket != null )

    socket.emit( evt, f )
  
  else if ( socket != null )
  
    socket.emit( evt )

}

function get( path, func ) {

  routes[ path + "get" ] = func;

}

function post( path, func ) {

  routes[ path + "post" ] = func;

}

function isFunc( ff ) {

  var getType = {};

  return ff && getType.toString.call( ff ) === '[object Function]';

}

server.listen( port );

var Model,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
  Model = (function() {
    function Model() {
      this.bind('changed',function(){
        this.send('changed');
      });
    }
    return Model;
})();

var View,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
  View = (function() {
    function View( mod, req, res ) {
      this.response = res;
      this.model = mod;
      this.model.register( this );
    }
    return View;
})();

var Controller,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
  Controller = (function() {
    function Controller( Model, View ) {
      this.view = View;
      this.view.controller = this;
    }
    return Controller;
})();


Model.prototype.dependents = [];

Model.prototype.events = {};

Model.prototype.data = [];

Model.prototype.create = function( data ) {
  var target = data.in_reply_to;
  var client = new pg.Client('postgres://'+prefs['dbuser']+':'+prefs['dbpass']+'@'+prefs['dbhost']+':'+prefs['dbport'].toString()+'/'+prefs['dbname']);
  var model = this;
  client.on('drain', client.end.bind(client));
  client.connect();
  // body text, updated varchar(255), published varchar(255), author varchar(255), author_url v
  var dt = new Date();
  dt = dt.format("isoDateTime");
  var ins_query = client.query({
    text: 'INSERT INTO post (title,body,updated,published,author,author_url,author_email,profile_image) VALUES ($1,$2,$3,$4,$5,$6,$7,$8)',
    values: [data.title,"","",dt,data.author,data.author_url,"","http://megapump.com/defaultavatar.jpg"]
  });
  ins_query.on('end', function(result) {
    
    model.find();
    var squery = client.query({
      text: "select currval('post_id_seq')",
      values: []
    });
    



/*

    Pingback.send('[target]', '[source]', function(err, pingback) {
      if (!err) console.log('Pinged ' + pingback.href + ' successfully.');
    });

    // scan an html string for links to ping
    var text = 'a link here: <a href="http://localhost:9000/article">a post</a>';
    Pingback.scan(text, '[source]', function(err, pingback) {
      // optional callback - will get called for every pingback sent
      if (!err) console.log('Pinged ' + pingback.href + ' successfully.');
    });
*/
    
    squery.on('row', function(row) {
      var source = 'http://localhost:4444/'+row['currval'];
      
      var parsed = url.parse(target);
      var port = 80;
      if (!(null == parsed.port))
        port = parsed.port;
      console.log('posting to '+parsed.hostname+port.toString()+parsed.path);
        var options = {
          host: parsed.hostname,
          port: port,
          path: parsed.path
        };
        http.get(options, function(res) {
          var data = '';
          res.on('data', function (chunk) {
            data += chunk.toString();
          });
          res.on('end', function (chunk) {
            var pingback = require('pingback');
            pingback.scan(data, source, function(err, pingback) {
              if (!err) console.log('Pinged ' + pingback.href + ' successfully.');
            });

        });
          console.log(res.body);
          console.log('STATUS: ' + res.statusCode);
          console.log('HEADERS: ' + JSON.stringify(res.headers));
        }).on('error', function(e) {
          console.log('ERROR: ' + e.message);
        });
      
      
      
      jsdom.env({
        html: target,
        scripts: ["http://code.jquery.com/jquery.js"],
        done: function (errors, window) {
          var $ = window.$;
          var endpoint = $("link[rel='http://webmention.org/']").attr('href');
          if (null == endpoint) {
            return;
          }
          var querystring = require('querystring');
          var http = require('http');
          var fs = require('fs');
          function PostCode(codestring,endpoint) {
            var post_data = querystring.stringify({
              'source': source,
              'target': target
            });
            var parsed = url.parse(endpoint);
            var port = 80;
            if (!(null == parsed.port))
              port = parsed.port;
            console.log('posting to '+parsed.hostname+port.toString()+parsed.path);
            var post_req = http.request({
                host: parsed.hostname,
                port: port,
                path: parsed.path,
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': post_data.length
                }
            }, function(res) {
                res.setEncoding('utf8');
                res.on('data', function (chunk) {
                    console.log('Response: ' + chunk);
                });
            });
            post_req.write(post_data);
            post_req.end();
          }
          PostCode('data',endpoint);
          //$("td.title:not(:last) a").each(function() {
          //  console.log(" -", $(this).text());
          //});
        }
      });

      
    });
    
  });
}

Model.prototype.register = function( view ) {
  this.dependents.push( view )
}

Model.prototype.bind = function( evt, func ) {
  this.events[ evt ] = func;
}

Model.prototype.send = function( evt ) {
  for (view in this.dependents) {
    this.dependents[view].receive( 'changed' );
  }
  trigger(evt);
}

Model.prototype.find = function(id) {
  var modelname = get_class(this).toLowerCase();
  var model = this;
  var rows = [];
  var client = new pg.Client('postgres://'+prefs['dbuser']+':'+prefs['dbpass']+'@'+prefs['dbhost']+':'+prefs['dbport'].toString()+'/'+prefs['dbname']);
  client.on('drain', client.end.bind(client));
  client.connect();
  var query = client.query({
    text: 'CREATE TABLE post (title text, body text, updated varchar(255), published varchar(255), author varchar(255), author_url varchar(255), author_email varchar(255), profile_image  varchar(255), id serial)',
    values: []
  });
  query.on('error', function(row) {
  });
  if (isInt(id))
    var query = client.query({
      text: 'SELECT * FROM '+modelname+' WHERE id = $1',
      values: [id]
    });
  else
    var query = client.query({
      text: 'SELECT * FROM '+modelname,
      values: []
    });
  query.on('row', function(row) {
    rows.push(row);
  });
  query.on('end', function(result) {
    model.data = rows;
    model.send( 'changed' );
  });
}

Model.prototype.to_hash = function() {
  return {content:'this i content',items:this.data};
}


Controller.prototype.model = null;

Controller.prototype.view = null;


View.prototype.model = null;

View.prototype.controller = null;

View.prototype.response = null;

View.prototype.render = function() {
  viewname = get_class(this).toLowerCase();
  modelname = get_class(this.model).toLowerCase();
  tpldir = '/../../views/';
  _view = tpldir+modelname+'/_'+viewname+'.html';
  view = tpldir+modelname+'/'+viewname+'.html';
  data = this.model.to_hash();
  t = fs.readFileSync(__dirname + _view, 'utf-8');
  data['content'] = '<h1 style="color:green;">server</h1>'+mustache.to_html( t, data );
  t = fs.readFileSync(__dirname + view, 'utf-8');
  this.response.end( mustache.to_html( t, data ));
};

View.prototype.receive = function( message ) {
  if (message == 'changed') {
    this.response.end( this.controller.render() );
  }
}







function config( settings ) {

  if ( !( undefined == settings['port'] ))

    port = settings['port'];
  
  if ( !( undefined == settings['ctype'] ))

    ctype = { 'Content-Type' : settings['ctype'] };

  if ( !( undefined == settings['dbname'] ))
    prefs['dbname'] = settings['dbname'];

  if ( !( undefined == settings['dbuser'] ))
    prefs['dbuser'] = settings['dbuser'];

  if ( !( undefined == settings['dbpass'] ))
    prefs['dbpass'] = settings['dbpass'];

  if ( !( undefined == settings['dbport'] ))
    prefs['dbport'] = settings['dbport'];

  if ( !( undefined == settings['dbhost'] ))
    prefs['dbhost'] = settings['dbhost'];
    
  if (!server == undefined)
    server.close();

  server.listen( port );

  return this;

}

function file( tpl, res ) {
  return res.end(fs.readFileSync( __dirname + '/../../' + tpl, 'utf-8' ));
}

module.exports.get = get;

module.exports.post = post;

module.exports.Model = Model;

module.exports.View = View;

module.exports.Controller = Controller;

module.exports.config = config;

module.exports.trigger = trigger;

module.exports.file = file;







get('/lib.js', function(req,res){
  return file( 'lib.js',res );
});
get('/io.js', function(req,res){
  return file( 'io.js',res );
});
get('/jquery.js', function(req,res){
  return file( 'jquery.js',res );
});

get('/app.js', function(req,res){
  return file( 'app.js',res );
});

get('/mustache.js', function(req,res){
  return file( 'mustache.js',res );
});

get('/style.css', function(req,res){
  return file( 'style.css',res );
});

get('/post/_home.html', function(req,res){
  return file( 'views'+'/post/_home.html',res );
});

get('/post/_show.html', function(req,res){
  return file( 'views'+'/post/_show.html',res );
});
post('/mention',function(req,res){

    var querystring = require('querystring');

    var fullBody = '';

    req.on('data', function(chunk) {
      fullBody += chunk.toString();
    });

    req.on('end', function() {

      var decodedBody = querystring.parse(fullBody);

      var in_reply_to_id = 0;

      var parsed = url.parse(decodedBody.target);
        var myarray  = parsed.path.split(/[\/]/);
        if (!(undefined == myarray[1]))
          if (isInt(myarray[1]))
            in_reply_to_id = myarray[1];

      if (in_reply_to_id > 0) {


        var client = new pg.Client('postgres://'+prefs['dbuser']+':@'+prefs['dbhost']+':'+prefs['dbport'].toString()+'/'+prefs['dbname']);
        client.on('drain', client.end.bind(client));
        client.connect();
        var query = client.query({
          text: 'CREATE TABLE mention (title text, body text, updated varchar(255), published varchar(255), author varchar(255), author_url varchar(255), author_email varchar(255), profile_image varchar(255), in_reply_to int, reply_url varchar(255), id serial)',
          values: []
        });
        query.on('error', function(row) {
        });
        query.on('end', function(result) {

          var ins_query = client.query({
            text: 'INSERT INTO mention (title,body,updated,published,author,author_url,author_email,profile_image,in_reply_to,reply_url) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)',
            values: ["","","","","","","","http://megapump.com/defaultavatar.jpg",in_reply_to_id,decodedBody.source]
          });
          ins_query.on('end', function(result) {

            Post = (function(_super) {
              __extends(Post, _super);

              function Post() {
                _ref = Post.__super__.constructor.apply(this, arguments);
                return _ref;
              }

              return Post;

            })(Model);

            model = new Post();
            model.send( 'changed' );
          });

        });


      }




  //    console.log('target = '+req.body.target);
  //    console.log('source = '+req.body.source);

      res.end();
    });

    /*

    var client = new pg.Client('postgres://'+prefs['dbuser']+':@'+prefs['dbhost']+':'+prefs['dbport'].toString()+'/'+prefs['dbname']);
    client.on('drain', client.end.bind(client));
    client.connect();
    var query = client.query({
      text: 'CREATE TABLE mention (title text, body text, updated varchar(255), published varchar(255), author varchar(255), author_url varchar(255), author_email varchar(255), profile_image varchar(255), id serial)',
      values: []
    });
    query.on('error', function(row) {
    });
    if (isInt(id))
      var query = client.query({
        text: 'SELECT * FROM '+modelname+' WHERE id = $1',
        values: [id]
      });
    else
      var query = client.query({
        text: 'SELECT * FROM '+modelname,
        values: []
      });
    query.on('row', function(row) {
      rows.push(row);
    });
    query.on('end', function(result) {
      model.data = rows;
      model.send( 'changed' );
    });
  */

    res.end('sweet');
});

get('/webmention',function(req,res){

  

/*
  var http = require('http');
  var options = {
    host: 'localhost',
    port: '4444',
    path: '/2'
  };
  http.get(options, function(res) {
    var data = '';
    res.on('data', function (chunk) {
      data += chunk.toString();
      });
      res.on('end', function (chunk) {
        });
//console.log(res.body);
//    console.log('STATUS: ' + res.statusCode);
//    console.log('HEADERS: ' + JSON.stringify(res.headers));
  }).on('error', function(e) {
    console.log('ERROR: ' + e.message);
  });
  


  var querystring = require('querystring');
  var http = require('http');
  var fs = require('fs');

  function PostCode(codestring) {
    var post_data = querystring.stringify({
      'compilation_level' : 'ADVANCED_OPTIMIZATIONS',
      'output_format': 'json',
      'output_info': 'compiled_code',
      'warning_level' : 'QUIET',
      'js_code' : codestring
    });
    var post_options = {
        host: 'localhost',
        port: '4444',
        path: '/mention',
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': post_data.length
        }
    };

    // Set up the request
    var post_req = http.request(post_options, function(res) {
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            console.log('Response: ' + chunk);
        });
    });

    // post the data
    post_req.write(post_data);
    post_req.end();

  }
  
  PostCode('');

  */
  
});
post('/post.json', function(req,res){
  var modelname = 'post';
  var fullBody = '';
  var rows = [];
  req.on('data', function(chunk) {
    fullBody += chunk.toString();
  });
  var id = false;
  var response = res;
  var rows = [];
  var client = new pg.Client('postgres://'+prefs['dbuser']+':'+prefs['dbpass']+'@'+prefs['dbhost']+':'+prefs['dbport'].toString()+'/'+prefs['dbname']);
  client.on('drain', client.end.bind(client));
  client.connect();
  req.on('end', function() {
    id = fullBody;
    if (isInt(id))
      var query = client.query({
        text: 'SELECT * FROM '+modelname+' WHERE id = $1',
        values: [id]
      });
    else
      var query = client.query({
        text: 'SELECT * FROM '+modelname,
        values: []
      });
    query.on('row', function(row) {
      rows.push(row);
    });
    query.on('end', function(result) {
      return response.end(JSON.stringify(rows));
    });
  });
});








function get_class(obj){
 function get_class(obj){
  return "".concat(obj).replace(/^.*function\s+([^\s]*|[^\(]*)\([^\x00]+$/, "$1") || "anonymous";
 };
 var result = "";
 if(obj === null)
  result = "null";
 else if(obj === undefined)
  result = "undefined";
 else {
  result = get_class(obj.constructor);
  if(result === "Object" && obj.constructor.prototype) {
   for(result in this) {
    if(typeof(this[result]) === "function" && obj instanceof this[result]) {
     result = get_class(this[result]);
     break;
    }
   }
  }
 };
 return result;
};
function is_a(obj, className){
  className = className.replace(/[^\w\$_]+/, "");
  return  get_class(obj) === className && {function:1}[eval("typeof(".concat(className,")"))] && obj instanceof eval(className)
};


function isInt(value){
    var er = /^[0-9]+$/;
    return ( er.test(value) ) ? true : false;
}


/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

var dateFormat = function () {
	var	token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
		timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
		timezoneClip = /[^-+\dA-Z]/g,
		pad = function (val, len) {
			val = String(val);
			len = len || 2;
			while (val.length < len) val = "0" + val;
			return val;
		};

	// Regexes and supporting functions are cached through closure
	return function (date, mask, utc) {
		var dF = dateFormat;

		// You can't provide utc if you skip other args (use the "UTC:" mask prefix)
		if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
			mask = date;
			date = undefined;
		}

		// Passing date through Date applies Date.parse, if necessary
		date = date ? new Date(date) : new Date;
		if (isNaN(date)) throw SyntaxError("invalid date");

		mask = String(dF.masks[mask] || mask || dF.masks["default"]);

		// Allow setting the utc argument via the mask
		if (mask.slice(0, 4) == "UTC:") {
			mask = mask.slice(4);
			utc = true;
		}

		var	_ = utc ? "getUTC" : "get",
			d = date[_ + "Date"](),
			D = date[_ + "Day"](),
			m = date[_ + "Month"](),
			y = date[_ + "FullYear"](),
			H = date[_ + "Hours"](),
			M = date[_ + "Minutes"](),
			s = date[_ + "Seconds"](),
			L = date[_ + "Milliseconds"](),
			o = utc ? 0 : date.getTimezoneOffset(),
			flags = {
				d:    d,
				dd:   pad(d),
				ddd:  dF.i18n.dayNames[D],
				dddd: dF.i18n.dayNames[D + 7],
				m:    m + 1,
				mm:   pad(m + 1),
				mmm:  dF.i18n.monthNames[m],
				mmmm: dF.i18n.monthNames[m + 12],
				yy:   String(y).slice(2),
				yyyy: y,
				h:    H % 12 || 12,
				hh:   pad(H % 12 || 12),
				H:    H,
				HH:   pad(H),
				M:    M,
				MM:   pad(M),
				s:    s,
				ss:   pad(s),
				l:    pad(L, 3),
				L:    pad(L > 99 ? Math.round(L / 10) : L),
				t:    H < 12 ? "a"  : "p",
				tt:   H < 12 ? "am" : "pm",
				T:    H < 12 ? "A"  : "P",
				TT:   H < 12 ? "AM" : "PM",
				Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
				o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
				S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
			};

		return mask.replace(token, function ($0) {
			return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
		});
	};
}();

// Some common format strings
dateFormat.masks = {
	"default":      "ddd mmm dd yyyy HH:MM:ss",
	shortDate:      "m/d/yy",
	mediumDate:     "mmm d, yyyy",
	longDate:       "mmmm d, yyyy",
	fullDate:       "dddd, mmmm d, yyyy",
	shortTime:      "h:MM TT",
	mediumTime:     "h:MM:ss TT",
	longTime:       "h:MM:ss TT Z",
	isoDate:        "yyyy-mm-dd",
	isoTime:        "HH:MM:ss",
	isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
	isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};

// Internationalization strings
dateFormat.i18n = {
	dayNames: [
		"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
		"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
	],
	monthNames: [
		"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
		"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
	]
};

// For convenience...
Date.prototype.format = function (mask, utc) {
	return dateFormat(this, mask, utc);
};
