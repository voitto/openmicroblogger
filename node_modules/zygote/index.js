
// Zygote
// June 22, 2013
// Brian Hendrickson <bh@bh.ly>


var http = require( 'http' );
var pg = require('pg');
var mustache = require( 'mustache' );
var fs = require('fs');
var jsdom = require('jsdom');

var ctype = { 'Content-Type' : 'text/html' };

var server = http.createServer( function( req, res ) {
  var f = routes[ req.url + req.method.toLowerCase() ];
  var value = false;
  if (f == undefined) {
    var myarray  = req.url.split(/[\/]/);
    if (!(undefined == myarray[1]))
      if (isInt(myarray[1])) {
        f = routes[ '/:id' + 'get' ];
        value = myarray[1];
      }
  }
  res.writeHead( 200, ctype );
  if ( isFunc( f ))
    f( req, res, value );
  trigger( req.method.toLowerCase(), req, res );
});

var socket = null;
var prefs = {};

var io = require( 'socket.io' ).listen( server );

io.sockets.on( 'connection', function ( sock ) {
  socket = sock;
  socket.on('clientevent', function (data) {
    //
  });
});

var port = 4444;

var routes = {};

var models = {};

var events = {};

function trigger( evt, req, res ) {
  
  f = events[ evt ];

  if ( isFunc( f ) && socket != null )

    socket.emit( evt, f )
  
  else if ( socket != null )
  
    socket.emit( evt )

}

function get( path, func ) {

  routes[ path + "get" ] = func;

}

function post( path, func ) {

  routes[ path + "post" ] = func;

}

function isFunc( ff ) {

  var getType = {};

  return ff && getType.toString.call( ff ) === '[object Function]';

}

server.listen( port );

var Model,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
  Model = (function() {
    function Model() {
      this.bind('changed',function(){
        this.send('changed');
      });
    }
    return Model;
})();

var View,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
  View = (function() {
    function View( mod, req, res ) {
      this.response = res;
      this.model = mod;
      this.model.register( this );
    }
    return View;
})();

var Controller,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
  Controller = (function() {
    function Controller( Model, View ) {
      this.view = View;
      this.view.controller = this;
    }
    return Controller;
})();


Model.prototype.dependents = [];

Model.prototype.events = {};

Model.prototype.data = [];

Model.prototype.create = function( data ) {
  var client = new pg.Client('postgres://'+prefs['dbuser']+':@'+prefs['dbhost']+':'+prefs['dbport'].toString()+'/'+prefs['dbname']);
  var model = this;
  client.on('drain', client.end.bind(client));
  client.connect();
  var ins_query = client.query({
    text: 'INSERT INTO post (title) VALUES ($1)',
    values: [data.title]
  });
  ins_query.on('end', function(result) {
    model.find();
  });
}

Model.prototype.register = function( view ) {
  this.dependents.push( view )
}

Model.prototype.bind = function( evt, func ) {
  this.events[ evt ] = func;
}

Model.prototype.send = function( evt ) {
  for (view in this.dependents) {
    this.dependents[view].receive( 'changed' );
  }
  trigger(evt);
}

Model.prototype.find = function(id) {
  var modelname = get_class(this).toLowerCase();
  var model = this;
  var rows = [];
  var client = new pg.Client('postgres://'+prefs['dbuser']+':@'+prefs['dbhost']+':'+prefs['dbport'].toString()+'/'+prefs['dbname']);
  client.on('drain', client.end.bind(client));
  client.connect();
  var query = client.query({
    text: 'CREATE TABLE post (title text, body text, id serial)',
    values: []
  });
  query.on('error', function(row) {
  });
  if (isInt(id))
    var query = client.query({
      text: 'SELECT * FROM '+modelname+' WHERE id = $1',
      values: [id]
    });
  else
    var query = client.query({
      text: 'SELECT * FROM '+modelname,
      values: []
    });
  query.on('row', function(row) {
    rows.push(row);
  });
  query.on('end', function(result) {
    model.data = rows;
    model.send( 'changed' );
  });
}

Model.prototype.to_hash = function() {
  return {content:'this i content',items:this.data};
}


Controller.prototype.model = null;

Controller.prototype.view = null;


View.prototype.model = null;

View.prototype.controller = null;

View.prototype.response = null;

View.prototype.render = function() {
  viewname = get_class(this).toLowerCase();
  modelname = get_class(this.model).toLowerCase();
  tpldir = '/../../views/';
  _view = tpldir+modelname+'/_'+viewname+'.html';
  view = tpldir+modelname+'/'+viewname+'.html';
  data = this.model.to_hash();
  t = fs.readFileSync(__dirname + _view, 'utf-8');
  data['content'] = '<h1 style="color:green;">server</h1>'+mustache.to_html( t, data );
  t = fs.readFileSync(__dirname + view, 'utf-8');
  this.response.end( mustache.to_html( t, data ));
};

View.prototype.receive = function( message ) {
  if (message == 'changed') {
    this.response.end( this.controller.render() );
  }
}







function config( settings ) {

  if ( !( undefined == settings['port'] ))

    port = settings['port'];
  
  if ( !( undefined == settings['ctype'] ))

    ctype = { 'Content-Type' : settings['ctype'] };

  if ( !( undefined == settings['dbname'] ))
    prefs['dbname'] = settings['dbname'];

  if ( !( undefined == settings['dbuser'] ))
    prefs['dbuser'] = settings['dbuser'];

  if ( !( undefined == settings['dbpass'] ))
    prefs['dbpass'] = settings['dbpass'];

  if ( !( undefined == settings['dbport'] ))
    prefs['dbport'] = settings['dbport'];

  if ( !( undefined == settings['dbhost'] ))
    prefs['dbhost'] = settings['dbhost'];
    
  if (!server == undefined)
    server.close();

  server.listen( port );

  return this;

}

function file( tpl, res ) {
  return res.end(fs.readFileSync( __dirname + '/../../' + tpl, 'utf-8' ));
}

module.exports.get = get;

module.exports.post = post;

module.exports.Model = Model;

module.exports.View = View;

module.exports.Controller = Controller;

module.exports.config = config;

module.exports.trigger = trigger;

module.exports.file = file;







get('/lib.js', function(req,res){
  return file( 'lib.js',res );
});
get('/io.js', function(req,res){
  return file( 'io.js',res );
});
get('/jquery.js', function(req,res){
  return file( 'jquery.js',res );
});

get('/app.js', function(req,res){
  return file( 'app.js',res );
});

get('/mustache.js', function(req,res){
  return file( 'mustache.js',res );
});

get('/style.css', function(req,res){
  return file( 'style.css',res );
});

get('/post/_home.html', function(req,res){
  return file( 'views'+'/post/_home.html',res );
});

get('/post/_show.html', function(req,res){
  return file( 'views'+'/post/_show.html',res );
});
get('/mention',function(req,res){

  jsdom.env({
    html: 'http://localhost:4444/2',
    scripts: ["http://code.jquery.com/jquery.js"],
    done: function (errors, window) {
      var $ = window.$;
      var endpoint = $("link[rel='http://webmention.org/']").attr('href');
      
      //$("td.title:not(:last) a").each(function() {
      //  console.log(" -", $(this).text());
      //});
    }
  });

/*
  var http = require('http');
  var options = {
    host: 'localhost',
    port: '4444',
    path: '/2'
  };
  http.get(options, function(res) {
    var data = '';
    res.on('data', function (chunk) {
      data += chunk.toString();
      });
      res.on('end', function (chunk) {
        });
//console.log(res.body);
//    console.log('STATUS: ' + res.statusCode);
//    console.log('HEADERS: ' + JSON.stringify(res.headers));
  }).on('error', function(e) {
    console.log('ERROR: ' + e.message);
  });
  


  var querystring = require('querystring');
  var http = require('http');
  var fs = require('fs');

  function PostCode(codestring) {
    var post_data = querystring.stringify({
      'compilation_level' : 'ADVANCED_OPTIMIZATIONS',
      'output_format': 'json',
      'output_info': 'compiled_code',
      'warning_level' : 'QUIET',
      'js_code' : codestring
    });
    var post_options = {
        host: 'localhost',
        port: '4444',
        path: '/mention',
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': post_data.length
        }
    };

    // Set up the request
    var post_req = http.request(post_options, function(res) {
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            console.log('Response: ' + chunk);
        });
    });

    // post the data
    post_req.write(post_data);
    post_req.end();

  }
  
  PostCode('');

  */
  
});
post('/post.json', function(req,res){
  var fullBody = '';
  var rows = [];
  req.on('data', function(chunk) {
    fullBody += chunk.toString();
  });
  var id = false;
  var response = res;
  var rows = [];
  var client = new pg.Client('postgres://'+prefs['dbuser']+':@'+prefs['dbhost']+':'+prefs['dbport'].toString()+'/'+prefs['dbname']);
  client.on('drain', client.end.bind(client));
  client.connect();
  req.on('end', function() {
    id = fullBody;
    if (isInt(id))
      var query = client.query({
        text: 'SELECT * FROM '+modelname+' WHERE id = $1',
        values: [id]
      });
    else
      var query = client.query({
        text: 'SELECT * FROM '+modelname,
        values: []
      });
    query.on('row', function(row) {
      rows.push(row);
    });
    query.on('end', function(result) {
      return response.end(JSON.stringify(rows));
    });
  });
});








function get_class(obj){
 function get_class(obj){
  return "".concat(obj).replace(/^.*function\s+([^\s]*|[^\(]*)\([^\x00]+$/, "$1") || "anonymous";
 };
 var result = "";
 if(obj === null)
  result = "null";
 else if(obj === undefined)
  result = "undefined";
 else {
  result = get_class(obj.constructor);
  if(result === "Object" && obj.constructor.prototype) {
   for(result in this) {
    if(typeof(this[result]) === "function" && obj instanceof this[result]) {
     result = get_class(this[result]);
     break;
    }
   }
  }
 };
 return result;
};
function is_a(obj, className){
  className = className.replace(/[^\w\$_]+/, "");
  return  get_class(obj) === className && {function:1}[eval("typeof(".concat(className,")"))] && obj instanceof eval(className)
};


function isInt(value){
    var er = /^[0-9]+$/;
    return ( er.test(value) ) ? true : false;
}

